import { describe, expect, it } from 'vitest';
import type { OverallCoverage } from '../aggregator';
import { generateMarkdownReport } from '../report';
import type { HistoryComparison } from '../history';

describe('generateMarkdownReport', () => {
  it('should generate report with all passing modules', () => {
    const coverage: OverallCoverage = {
      percentage: 85.5,
      covered: 855,
      total: 1000,
      modules: [
        {
          module: ':core:common',
          coverage: { covered: 855, missed: 145, total: 1000, percentage: 85.5 },
          threshold: 80,
          passed: true,
        },
      ],
    };

    const report = generateMarkdownReport(coverage, 'Code Coverage Report');

    expect(report).toContain('## 📊 Code Coverage Report');
    expect(report).toContain('**Overall Coverage: 85.5%**');
    expect(report).toContain(':core:common');
    expect(report).toContain('85.5%');
    expect(report).toContain('80%');
    expect(report).toContain('✅');
    expect(report).toContain('<!-- kover-coverage-report -->');
  });

  it('should show ⚠️ for modules with null coverage', () => {
    const coverage: OverallCoverage = {
      percentage: 85.5,
      covered: 855,
      total: 1000,
      modules: [
        {
          module: ':core',
          coverage: null,
          threshold: 0,
          passed: false,
        },
        {
          module: ':core:common',
          coverage: { covered: 855, missed: 145, total: 1000, percentage: 85.5 },
          threshold: 80,
          passed: true,
        },
      ],
    };

    const report = generateMarkdownReport(coverage, 'Coverage Report');

    expect(report).toContain(':core');
    expect(report).toContain('N/A');
    expect(report).toContain('⚠️');
    expect(report).toContain(':core:common');
    expect(report).toContain('✅');
  });

  it('should show ❌ for failing modules', () => {
    const coverage: OverallCoverage = {
      percentage: 63.3,
      covered: 950,
      total: 1500,
      modules: [
        {
          module: ':feature:auth',
          coverage: { covered: 150, missed: 350, total: 500, percentage: 30.0 },
          threshold: 70,
          passed: false,
        },
      ],
    };

    const report = generateMarkdownReport(coverage, 'Coverage Report');

    expect(report).toContain(':feature:auth');
    expect(report).toContain('30.0%');
    expect(report).toContain('70%');
    expect(report).toContain('❌');
  });

  it('should sort modules alphabetically', () => {
    const coverage: OverallCoverage = {
      percentage: 75.0,
      covered: 750,
      total: 1000,
      modules: [
        {
          module: ':feature:auth',
          coverage: { covered: 300, missed: 200, total: 500, percentage: 60.0 },
          threshold: 70,
          passed: false,
        },
        {
          module: ':core:common',
          coverage: { covered: 250, missed: 50, total: 300, percentage: 83.3 },
          threshold: 80,
          passed: true,
        },
        {
          module: ':data:repository',
          coverage: { covered: 200, missed: 0, total: 200, percentage: 100.0 },
          threshold: 75,
          passed: true,
        },
      ],
    };

    const report = generateMarkdownReport(coverage, 'Coverage Report');

    // Check that modules appear in alphabetical order
    const coreIndex = report.indexOf(':core:common');
    const dataIndex = report.indexOf(':data:repository');
    const featureIndex = report.indexOf(':feature:auth');

    expect(coreIndex).toBeLessThan(dataIndex);
    expect(dataIndex).toBeLessThan(featureIndex);
  });

  it('should include legend and footer', () => {
    const coverage: OverallCoverage = {
      percentage: 85.5,
      covered: 855,
      total: 1000,
      modules: [
        {
          module: ':app',
          coverage: { covered: 855, missed: 145, total: 1000, percentage: 85.5 },
          threshold: 80,
          passed: true,
        },
      ],
    };

    const report = generateMarkdownReport(coverage, 'Coverage Report');

    expect(report).toContain('### Legend');
    expect(report).toContain('✅ Coverage meets threshold');
    expect(report).toContain('❌ Coverage below threshold');
    expect(report).toContain('⚠️ No coverage report found');
    expect(report).toContain('_Generated by [kover-report-action]');
  });

  it('should handle mixed status modules', () => {
    const coverage: OverallCoverage = {
      percentage: 73.3,
      covered: 1100,
      total: 1500,
      modules: [
        {
          module: ':core:common',
          coverage: { covered: 800, missed: 200, total: 1000, percentage: 80.0 },
          threshold: 80,
          passed: true,
        },
        {
          module: ':core:testing',
          coverage: null,
          threshold: 0,
          passed: false,
        },
        {
          module: ':data:repository',
          coverage: { covered: 300, missed: 200, total: 500, percentage: 60.0 },
          threshold: 75,
          passed: false,
        },
      ],
    };

    const report = generateMarkdownReport(coverage, 'Coverage Report');

    expect(report).toContain('**Overall Coverage: 73.3%**');
    expect(report).toContain(':core:common');
    expect(report).toContain('80.0%');
    expect(report).toContain('✅');
    expect(report).toContain(':core:testing');
    expect(report).toContain('N/A');
    expect(report).toContain('⚠️');
    expect(report).toContain(':data:repository');
    expect(report).toContain('60.0%');
    expect(report).toContain('❌');
  });

  it('should format coverage percentages to 1 decimal place', () => {
    const coverage: OverallCoverage = {
      percentage: 85.567,
      covered: 855,
      total: 1000,
      modules: [
        {
          module: ':app',
          coverage: { covered: 855, missed: 145, total: 1000, percentage: 85.567 },
          threshold: 80,
          passed: true,
        },
      ],
    };

    const report = generateMarkdownReport(coverage, 'Coverage Report');

    expect(report).toContain('**Overall Coverage: 85.6%**');
    expect(report).toContain('| :app | 85.6% |');
  });

  it('should use custom title', () => {
    const coverage: OverallCoverage = {
      percentage: 85.5,
      covered: 855,
      total: 1000,
      modules: [],
    };

    const report = generateMarkdownReport(coverage, 'My Custom Report Title');

    expect(report).toContain('## 📊 My Custom Report Title');
  });

  it('should handle empty modules list', () => {
    const coverage: OverallCoverage = {
      percentage: 0,
      covered: 0,
      total: 0,
      modules: [],
    };

    const report = generateMarkdownReport(coverage, 'Coverage Report');

    expect(report).toContain('## 📊 Coverage Report');
    expect(report).toContain('**Overall Coverage: 0.0%**');
    expect(report).toContain('### Module Coverage');
  });

  it('should show trend indicators when comparison is provided', () => {
    const coverage: OverallCoverage = {
      percentage: 87.0,
      covered: 870,
      total: 1000,
      modules: [
        {
          module: ':core:common',
          coverage: { covered: 870, missed: 130, total: 1000, percentage: 87.0 },
          threshold: 80,
          passed: true,
        },
      ],
    };

    const comparison: HistoryComparison = {
      overallDelta: 1.5, // +1.5%
      moduleDelta: {
        ':core:common': 1.5,
      },
      baseline: {
        timestamp: '2025-01-15T10:30:00Z',
        branch: 'main',
        commit: 'abc123',
        overall: { percentage: 85.5, covered: 855, total: 1000 },
        modules: { ':core:common': 85.5 },
      },
    };

    const report = generateMarkdownReport(coverage, 'Coverage Report', comparison);

    expect(report).toContain('**Overall Coverage: 87.0%**');
    expect(report).toContain('↑'); // Upward trend
    expect(report).toContain('+1.5%'); // Delta
    expect(report).toContain('Change'); // Column header
  });

  it('should show downward trend for decreased coverage', () => {
    const coverage: OverallCoverage = {
      percentage: 83.0,
      covered: 830,
      total: 1000,
      modules: [
        {
          module: ':feature:auth',
          coverage: { covered: 830, missed: 170, total: 1000, percentage: 83.0 },
          threshold: 80,
          passed: true,
        },
      ],
    };

    const comparison: HistoryComparison = {
      overallDelta: -2.5, // -2.5%
      moduleDelta: {
        ':feature:auth': -2.5,
      },
      baseline: {
        timestamp: '2025-01-15T10:30:00Z',
        branch: 'main',
        commit: 'abc123',
        overall: { percentage: 85.5, covered: 855, total: 1000 },
        modules: { ':feature:auth': 85.5 },
      },
    };

    const report = generateMarkdownReport(coverage, 'Coverage Report', comparison);

    expect(report).toContain('↓'); // Downward trend
    expect(report).toContain('-2.5%'); // Delta
  });

  it('should show no change indicator for stable coverage', () => {
    const coverage: OverallCoverage = {
      percentage: 85.5,
      covered: 855,
      total: 1000,
      modules: [
        {
          module: ':data:repository',
          coverage: { covered: 855, missed: 145, total: 1000, percentage: 85.5 },
          threshold: 80,
          passed: true,
        },
      ],
    };

    const comparison: HistoryComparison = {
      overallDelta: 0.0, // No change
      moduleDelta: {
        ':data:repository': 0.05, // Very small change (< 0.1%)
      },
      baseline: {
        timestamp: '2025-01-15T10:30:00Z',
        branch: 'main',
        commit: 'abc123',
        overall: { percentage: 85.5, covered: 855, total: 1000 },
        modules: { ':data:repository': 85.45 },
      },
    };

    const report = generateMarkdownReport(coverage, 'Coverage Report', comparison);

    expect(report).toContain('→'); // No change trend
  });

  it('should handle modules without baseline (new modules)', () => {
    const coverage: OverallCoverage = {
      percentage: 85.0,
      covered: 850,
      total: 1000,
      modules: [
        {
          module: ':new:module',
          coverage: { covered: 850, missed: 150, total: 1000, percentage: 85.0 },
          threshold: 80,
          passed: true,
        },
      ],
    };

    const comparison: HistoryComparison = {
      overallDelta: 1.0,
      moduleDelta: {
        ':new:module': null, // New module, no baseline
      },
      baseline: {
        timestamp: '2025-01-15T10:30:00Z',
        branch: 'main',
        commit: 'abc123',
        overall: { percentage: 84.0, covered: 840, total: 1000 },
        modules: {},
      },
    };

    const report = generateMarkdownReport(coverage, 'Coverage Report', comparison);

    expect(report).toContain(':new:module');
    expect(report).toContain('85.0%');
    // Should show "new" or "-" for modules without baseline
    expect(report).toMatch(/new|—|-/i);
  });

  it('should not show trend column when no comparison provided', () => {
    const coverage: OverallCoverage = {
      percentage: 85.5,
      covered: 855,
      total: 1000,
      modules: [
        {
          module: ':core:common',
          coverage: { covered: 855, missed: 145, total: 1000, percentage: 85.5 },
          threshold: 80,
          passed: true,
        },
      ],
    };

    const report = generateMarkdownReport(coverage, 'Coverage Report');

    // Should not have "Change" column when no comparison
    expect(report).not.toContain('Change');
    expect(report).not.toContain('↑');
    expect(report).not.toContain('↓');
  });
});
